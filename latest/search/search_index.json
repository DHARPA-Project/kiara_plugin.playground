{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: playground","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>playground</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li> <p><code>create.degree_rank_list</code>: Creates an ordered table with the rank and raw score for degree centrality.</p> </li> <li> <p><code>create.betweenness_rank_list</code>: Creates an ordered table with the rank and raw score for betweenness centrality.</p> </li> <li> <p><code>create.eigenvector_rank_list</code>: Creates an ordered table with the rank and raw score for betweenness centrality.</p> </li> <li> <p><code>create.closeness_rank_list</code>: Creates an ordered table with the rank and raw score for closeness centrality.</p> </li> <li> <p><code>create.cut_point_list</code>: Create a list of nodes that are cut-points.</p> </li> <li> <p><code>get.network_info</code>: Return basic information for the newtork graph created, including number of nodes and edges.</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.file_name_metadata</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.map_column</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.table_sample</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.add_column</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.viz_data_query</code>: -- n/a --</p> </li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li> <p><code>create.betweenness_rank_list</code>: Creates an ordered table with the rank and raw score for betweenness centrality.</p> </li> <li> <p><code>create.closeness_rank_list</code>: Creates an ordered table with the rank and raw score for closeness centrality.</p> </li> <li> <p><code>create.cut_point_list</code>: Create a list of nodes that are cut-points.</p> </li> <li> <p><code>create.degree_rank_list</code>: Creates an ordered table with the rank and raw score for degree centrality.</p> </li> <li> <p><code>create.eigenvector_rank_list</code>: Creates an ordered table with the rank and raw score for betweenness centrality.</p> </li> <li> <p><code>get.network_info</code>: Return basic information for the newtork graph created, including number of nodes and edges.</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.add_column</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.file_name_metadata</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.map_column</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.table_sample</code>: -- n/a --</p> </li> <li> <p><code>kiara_plugin.playground.modules.mariella.viz_data_query</code>: -- n/a --</p> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.playground</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.playground</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n playground python=3.9\nconda activate playground\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.playground repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.playground.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.playground\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.playground\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t playground\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.create.degree_rank_list","title":"<code>create.degree_rank_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Creates an ordered table with the rank and raw        \n                          score for degree centrality.                          \n                          In an undirected graph, degree centrality measures    \n                          the number of independent connections each node       \n                          has.                                                  \n                          Uses networkx degree.                                 \n                          https://networkx.org/documentation/stable/referenc\u2026   \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    Degree_Ranking                   \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class Degree_Ranking(KiaraModule):                    \n \"\"\"Creates an ordered table with the rank and \u2026   \n     In an undirected graph, degree centrality meas\u2026   \n     Uses networkx degree.                             \n     https://networkx.org/documentation/stable/refe\u2026   \n     _module_type_name = 'create.degree_rank_list'     \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"table\",                      \n \"doc\" : \"A table showing the rank \u2026   \n             },                                        \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"Updated network data with \u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n         G = network_data.as_networkx_graph(nx.Grap\u2026   \n def result_func(list):                        \n             rank, count, previous, result = (0, 0,\u2026   \n for key, num in list:                     \n                 count += 1                            \n if num != previous:                   \n                     rank += count                     \n                     previous = num                    \n                     count = 0                         \n                 result[key] = num, rank               \n return result                             \n         degree = G.degree()                           \n         nx.set_node_attributes(G, degree, 'Degree')   \n         sorted_dict = [[item[1][1], item [0], item\u2026   \n         df= pd.DataFrame(sorted_dict)                 \n         df.columns = ['Rank', 'Node', 'Score']        \n         attribute_network = create_from_networkx_g\u2026   \n         outputs.set_value('network_result', df)       \n         outputs.set_value('network_data', attribut\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.create.betweenness_rank_list","title":"<code>create.betweenness_rank_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Creates an ordered table with the rank and raw        \n                          score for betweenness centrality.                     \n                          In an undirected graph, betweenness centrality        \n                          measures the percentage of all shortest paths that    \n                          a node appears on, therefore measuring the            \n                          likeliness that a node may act as a connector or      \n                          'intermediary'.                                       \n                          Uses networkx.betweenness_centrality()                \n                          https://networkx.org/documentation/stable/referenc\u2026   \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    Betweenness_Ranking              \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class Betweenness_Ranking(KiaraModule):               \n \"\"\"Creates an ordered table with the rank and \u2026   \n     In an undirected graph, betweenness centrality\u2026   \n     Uses networkx.betweenness_centrality()            \n     https://networkx.org/documentation/stable/refe\u2026   \n     _module_type_name = 'create.betweenness_rank_l\u2026   \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"table\",                      \n \"doc\" : \"A table showing the rank \u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n         G = network_data.as_networkx_graph(nx.Grap\u2026   \n def result_func(list):                        \n             rank, count, previous, result = (0, 0,\u2026   \n for key, num in list:                     \n                 count += 1                            \n if num != previous:                   \n                     rank += count                     \n                     previous = num                    \n                     count = 0                         \n                 result[key] = num, rank               \n return result                             \n         between = nx.betweenness_centrality(G)        \n         sorted_dict = [[item[1][1], item [0], item\u2026   \n         df= pd.DataFrame(sorted_dict)                 \n         df.columns = ['Rank', 'Node', 'Score']        \n         outputs.set_value('network_result', df)       \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.create.eigenvector_rank_list","title":"<code>create.eigenvector_rank_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Creates an ordered table with the rank and raw        \n                          score for betweenness centrality.                     \n                          In an undirected graph, eigenvector centrality        \n                          measures the extent to which a node is connected to   \n                          other nodes of importance or influence.               \n                          Uses networkx.eigenvector_centrality()                \n                          https://networkx.org/documentation/stable/referenc\u2026   \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    Eigenvector_Ranking              \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class Eigenvector_Ranking(KiaraModule):               \n \"\"\"Creates an ordered table with the rank and \u2026   \n     In an undirected graph, eigenvector centrality\u2026   \n     Uses networkx.eigenvector_centrality()            \n     https://networkx.org/documentation/stable/refe\u2026   \n     _module_type_name = 'create.eigenvector_rank_l\u2026   \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             },                                        \n \"iterations\": {                           \n \"type\" : \"integer\",                   \n \"default\": 1000                       \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"table\",                      \n \"doc\" : \"A table showing the rank \u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         iterations = inputs.get_value_data(\"iterat\u2026   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n         G = network_data.as_networkx_graph(nx.Grap\u2026   \n def result_func(list):                        \n             rank, count, previous, result = (0, 0,\u2026   \n for key, num in list:                     \n                 count += 1                            \n if num != previous:                   \n                     rank += count                     \n                     previous = num                    \n                     count = 0                         \n                 result[key] = num, rank               \n return result                             \n         eigenvector = nx.eigenvector_centrality(G,\u2026   \n         sorted_dict = [[item[1][1], item [0], item\u2026   \n         df= pd.DataFrame(sorted_dict)                 \n         df.columns = ['Rank', 'Node', 'Score']        \n         outputs.set_value('network_result', df)       \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.create.closeness_rank_list","title":"<code>create.closeness_rank_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Creates an ordered table with the rank and raw        \n                          score for closeness centrality.                       \n                          In an undirected graph, closeness centrality          \n                          measures the average shortest distance path between   \n                          a node and all reachable nodes in the network.        \n                          Uses networkx.closeness_centrality()                  \n                          https://networkx.org/documentation/stable/referenc\u2026   \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    Closeness_Ranking                \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class Closeness_Ranking(KiaraModule):                 \n \"\"\"Creates an ordered table with the rank and \u2026   \n     In an undirected graph, closeness centrality m\u2026   \n     Uses networkx.closeness_centrality()              \n     https://networkx.org/documentation/stable/refe\u2026   \n     _module_type_name = 'create.closeness_rank_lis\u2026   \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"table\",                      \n \"doc\" : \"A table showing the rank \u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n         G = network_data.as_networkx_graph(nx.Grap\u2026   \n def result_func(list):                        \n             rank, count, previous, result = (0, 0,\u2026   \n for key, num in list:                     \n                 count += 1                            \n if num != previous:                   \n                     rank += count                     \n                     previous = num                    \n                     count = 0                         \n                 result[key] = num, rank               \n return result                             \n         closeness = nx.closeness_centrality(G)        \n         sorted_dict = [[item[1][1], item [0], item\u2026   \n         df= pd.DataFrame(sorted_dict)                 \n         df.columns = ['Rank', 'Node', 'Score']        \n         outputs.set_value('network_result', df)       \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.create.cut_point_list","title":"<code>create.cut_point_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Create a list of nodes that are cut-points.           \n                          Cut-points are any node in a network whose removal    \n                          disconnects members of the network, creating one or   \n                          more new distinct components.                         \n                          Uses networkx.articulation_points()                   \n                          https://networkx.org/documentation/stable/referenc\u2026   \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    CutPointsList                    \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class CutPointsList(KiaraModule):                     \n \"\"\"Create a list of nodes that are cut-points.    \n     Cut-points are any node in a network whose rem\u2026   \n     Uses networkx.articulation_points()               \n     https://networkx.org/documentation/stable/refe\u2026   \n     _module_type_name = 'create.cut_point_list'       \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"list\",                       \n \"doc\" : \"A list of all nodes that \u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n         G = network_data.as_networkx_graph(nx.Grap\u2026   \n         cutpoints = list(nx.articulation_points(G))   \n         outputs.set_value('network_result', cutpoi\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.get.network_info","title":"<code>get.network_info</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Return basic information for the newtork graph        \n                          created, including number of nodes and edges.         \n                          Needs to specify if graph is directed or              \n                          undirected, but will default to undirected.           \n                       Author(s)                                                                      \n    Caitlin Burge              caitlin.burge@uni.lu       \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    NetworkInfo                      \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class NetworkInfo(KiaraModule):                       \n \"\"\"Return basic information for the newtork gr\u2026   \n     Needs to specify if graph is directed or undir\u2026   \n     _module_type_name = 'get.network_info'            \n def create_inputs_schema(self):                   \n return {                                      \n \"network_data\": {                         \n \"type\": \"network_data\",               \n \"doc\": \"The network graph being qu\u2026   \n             },                                        \n \"graph_type\": {                           \n \"type\": \"string\",                     \n \"doc\": \"The graph type: directed o\u2026   \n \"default\": \"undirected\"               \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"network_result\": {                       \n \"type\": \"string\",                     \n \"doc\" : \"Information about the net\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs):               \n         edges = inputs.get_value_obj('network_data\u2026   \n         graph = inputs.get_value_data('graph_type')   \n         network_data: NetworkData = edges.data  # \u2026   \n # \u2026   \n # \u2026   \n if graph == 'directed':                       \n             G = network_data.as_networkx_graph(nx.\u2026   \n else:                                         \n             G = network_data.as_networkx_graph(nx.\u2026   \n if nx.is_directed(G) == True:                 \n                 info = str(                           \n 'Graph Type: Directed \\n' +           \n 'Number of Nodes: ' + str(nx.numbe\u2026   \n 'Number of Edges: ' + str(nx.numbe\u2026   \n 'Graph Density Score: ' + str(nx.d\u2026   \n 'Number of Connected Components: '\u2026   \n 'Number of nodes in Largest Compon\u2026   \n 'Network Diameter of Largest Compo\u2026   \n 'Average Path Length of Largest Co\u2026   \n                 )                                     \n else:                                         \n             info = str(                               \n 'Graph Type: Undirected \\n' +             \n 'Number of Nodes: ' + str(nx.number_of\u2026   \n 'Number of Edges: ' + str(nx.number_of\u2026   \n 'Graph Density Score: ' + str(nx.densi\u2026   \n 'Number of Connected Components: ' + s\u2026   \n 'Number of nodes in Largest Component:\u2026   \n 'Network Diameter of Largest Component\u2026   \n 'Average Path Length of Largest Compon\u2026   \n                 )                                     \n         outputs.set_value('network_result', info)     \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.kiara_plugin.playground.modules.mariella.file_name_metadata","title":"<code>kiara_plugin.playground.modules.mariella.file_name_metadata</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    FileNameMetadata                 \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class FileNameMetadata(KiaraModule):                  \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The corpus for which we wa\u2026   \n             },                                        \n \"column_name\": {                          \n \"type\": \"string\",                     \n \"doc\": \"The column containing meta\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"table_output\": {                         \n \"type\": \"table\",                      \n \"doc\": \"Augmented table containing\u2026   \n             },                                        \n \"publications_ref\": {                     \n \"type\": \"list\",                       \n \"doc\": \"List of unique publication\u2026   \n              },                                       \n # \"publications_count\": {                 \n #     \"type\": \"list\",                     \n #     \"doc\": \"Count of unique publicat\u2026   \n # }                                       \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         column_name = inputs.get_value_obj(\"column\u2026   \n         df = table_obj.data.to_pandas()               \n # get publication ref from file name         \n def get_ref(file):                            \n             ref_match = re.findall(r'(\\w+\\d+)_\\d{4\u2026   \n if not ref_match:                         \n raise KiaraProcessingException(f\"C\u2026   \n return ref_match[0]                       \n # get date from file name                     \n def get_date(file):                           \n             date_match = re.findall(r'_(\\d{4}-\\d{2\u2026   \n if not date_match:                        \n raise KiaraProcessingException(f\"C\u2026   \n return date_match[0]                      \n         df['date'] = df['file_name'].apply(lambda \u2026   \n         df['publication'] = df[column_name].apply(\u2026   \n         df['date'] = pd.to_datetime(df['date'])       \n         df = df.sort_values(by='date')                \n         publications = df['publication'].unique().\u2026   \n # counts = [df['publication'].value_counts\u2026   \n         outputs.set_value(\"table_output\", df)         \n # unique publications references useful at\u2026   \n         outputs.set_value(\"publications_ref\", publ\u2026   \n # outputs.set_value(\"publications_count\", \u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.kiara_plugin.playground.modules.mariella.map_column","title":"<code>kiara_plugin.playground.modules.mariella.map_column</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    MapColumn                        \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class MapColumn(KiaraModule):                         \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The table that we need to \u2026   \n             },                                        \n \"column_name\": {                          \n \"type\": \"string\",                     \n \"doc\": \"The column that needs mapp\u2026   \n             },                                        \n \"mapping_keys\": {                         \n \"type\": \"list\",                       \n \"doc\": \"list containing 2 lists: 1\u2026   \n             },                                        \n \"output_col_name\": {                      \n \"type\": \"string\",                     \n \"doc\": \"name of the newly created \u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"table_output\": {                         \n \"type\": \"table\",                      \n \"doc\": \"Augmented table containing\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         column_name = inputs.get_value_obj(\"column\u2026   \n         mapping_keys = inputs.get_value_obj(\"mappi\u2026   \n         output_col_name = inputs.get_value_obj(\"ou\u2026   \n         df = table_obj.data.to_pandas()               \n         df[output_col_name] = df[column_name].repl\u2026   \n         outputs.set_value(\"table_output\", df)         \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.kiara_plugin.playground.modules.mariella.table_sample","title":"<code>kiara_plugin.playground.modules.mariella.table_sample</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    TableSample                      \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class TableSample(KiaraModule):                       \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The table for which we nee\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"table_sample\": {                         \n \"type\": \"table\",                      \n \"doc\": \"Random sample of 15 rows f\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         df = table_obj.data.to_pandas()               \n         df_sample = df.sample(n=15,axis=0)            \n if '__index_level_0__' in df_sample.column\u2026   \n             df_sample = df_sample.drop(['__index_l\u2026   \n         table_pa = pa.Table.from_pandas(df_sample)    \n         outputs.set_value(\"table_sample\", table_pa)   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.kiara_plugin.playground.modules.mariella.add_column","title":"<code>kiara_plugin.playground.modules.mariella.add_column</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    AddColumn                        \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class AddColumn(KiaraModule):                         \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The table to which we need\u2026   \n             },                                        \n \"array_input\": {                          \n \"type\": \"array\",                      \n \"doc\": \"The array that needs to be\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"preprocessed_tokens\": {                  \n \"type\": \"table\",                      \n \"doc\": \"The table with the additio\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         array_obj = inputs.get_value_obj(\"array_in\u2026   \n         df = table_obj.data.to_pandas()               \n         col = array_obj.data.to_pylist()              \n         df['preprocessed_tokens'] = col               \n         outputs.set_value(\"preprocessed_tokens\", d\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.kiara_plugin.playground.modules.mariella.viz_data_query","title":"<code>kiara_plugin.playground.modules.mariella.viz_data_query</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Mariella De Crouy Chanel   mariella.decrouychanel@\u2026   \n Context                                                                        \n  Tags         playground                               \n                        Labels       package: kiara_plugin.playground         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    VizDataQuery                     \n                        python_module_name   kiara_plugin.playground.modul\u2026   \n                        full_name            kiara_plugin.playground.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class VizDataQuery(KiaraModule):                      \n def create_inputs_schema(self):                   \n return {                                      \n \"query_type\": {                           \n \"type\": \"string\",                     \n \"doc\": \"The wished data periodicit\u2026   \n             },                                        \n \"column\": {                               \n \"type\": \"string\",                     \n \"doc\": \"The column that contains p\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"query\": {                                \n \"type\": \"string\",                     \n \"doc\": \"The query to pass to the s\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         agg = inputs.get_value_obj(\"query_type\").d\u2026   \n         col = inputs.get_value_obj(\"column\").data     \n if agg == 'month':                            \n             query = f\"SELECT strptime(concat(month\u2026   \n elif agg == 'year':                           \n             query = f\"SELECT strptime(year, '%Y') \u2026   \n elif agg == 'day':                            \n             query = f\"SELECT strptime(concat('01/'\u2026   \n         outputs.set_value(\"query\", query)             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.create.betweenness_rank_list","title":"<code>create.betweenness_rank_list</code>","text":"Documentation <p>Creates an ordered table with the rank and raw score for betweenness centrality.</p> <p>In an undirected graph, betweenness centrality measures the percentage of all shortest paths that a node appears on, therefore measuring the likeliness that a node may act as a connector or 'intermediary'.</p> <p>Uses networkx.betweenness_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.betweenness_centrality.html#networkx.algorithms.centrality.betweenness_centrality</p> Inputs field name type description required default network_data network_data The network graph being queried. yes Outputs field name type description required default network_result table A table showing the rank and raw score for betweenness centrality. yes"},{"location":"info/operations/#kiara_info.operations.create.closeness_rank_list","title":"<code>create.closeness_rank_list</code>","text":"Documentation <p>Creates an ordered table with the rank and raw score for closeness centrality.</p> <p>In an undirected graph, closeness centrality measures the average shortest distance path between a node and all reachable nodes in the network.</p> <p>Uses networkx.closeness_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.closeness_centrality.html#networkx.algorithms.centrality.closeness_centrality</p> Inputs field name type description required default network_data network_data The network graph being queried. yes Outputs field name type description required default network_result table A table showing the rank and raw score for closeness centrality. yes"},{"location":"info/operations/#kiara_info.operations.create.cut_point_list","title":"<code>create.cut_point_list</code>","text":"Documentation <p>Create a list of nodes that are cut-points.</p> <p>Cut-points are any node in a network whose removal disconnects members of the network, creating one or more new distinct components.</p> <p>Uses networkx.articulation_points() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.components.articulation_points.html</p> Inputs field name type description required default network_data network_data The network graph being queried. yes Outputs field name type description required default network_result list A list of all nodes that are cut-points. yes"},{"location":"info/operations/#kiara_info.operations.create.degree_rank_list","title":"<code>create.degree_rank_list</code>","text":"Documentation <p>Creates an ordered table with the rank and raw score for degree centrality.</p> <p>In an undirected graph, degree centrality measures the number of independent connections each node has.</p> <p>Uses networkx degree. https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.degree.html</p> Inputs field name type description required default network_data network_data The network graph being queried. yes Outputs field name type description required default network_result table A table showing the rank and raw score for degree centrality. yes network_data network_data Updated network data with degree ranking assigned as a node attribute. yes"},{"location":"info/operations/#kiara_info.operations.create.eigenvector_rank_list","title":"<code>create.eigenvector_rank_list</code>","text":"Documentation <p>Creates an ordered table with the rank and raw score for betweenness centrality.</p> <p>In an undirected graph, eigenvector centrality measures the extent to which a node is connected to other nodes of importance or influence.</p> <p>Uses networkx.eigenvector_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.eigenvector_centrality.html#networkx.algorithms.centrality.eigenvector_centrality</p> Inputs field name type description required default network_data network_data The network graph being queried. yes iterations integer -- n/a -- no 1000 Outputs field name type description required default network_result table A table showing the rank and raw score for eigenvector centrality. yes"},{"location":"info/operations/#kiara_info.operations.get.network_info","title":"<code>get.network_info</code>","text":"Documentation <p>Return basic information for the newtork graph created, including number of nodes and edges.</p> <p>Needs to specify if graph is directed or undirected, but will default to undirected.</p> Inputs field name type description required default network_data network_data The network graph being queried. yes graph_type string The graph type: directed or undirected no undirected Outputs field name type description required default network_result string Information about the network graph. yes"},{"location":"info/operations/#kiara_info.operations.kiara_plugin.playground.modules.mariella.add_column","title":"<code>kiara_plugin.playground.modules.mariella.add_column</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default table_input table The table to which we need to append a column. yes array_input array The array that needs to be appended as a column. yes Outputs field name type description required default preprocessed_tokens table The table with the additional column. yes"},{"location":"info/operations/#kiara_info.operations.kiara_plugin.playground.modules.mariella.file_name_metadata","title":"<code>kiara_plugin.playground.modules.mariella.file_name_metadata</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default table_input table The corpus for which we want to extract metadata from file names. yes column_name string The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date. yes Outputs field name type description required default table_output table Augmented table containing extracted metadata. yes publications_ref list List of unique publications refs in table. yes"},{"location":"info/operations/#kiara_info.operations.kiara_plugin.playground.modules.mariella.map_column","title":"<code>kiara_plugin.playground.modules.mariella.map_column</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default table_input table The table that we need to augment by mapping column values (for example an id with a name) in a new column. yes column_name string The column that needs mapping. yes mapping_keys list list containing 2 lists: 1st list contains values to replace, and the second the ones they should be replaced with. yes output_col_name string name of the newly created column yes Outputs field name type description required default table_output table Augmented table containing new column with mapped values. yes"},{"location":"info/operations/#kiara_info.operations.kiara_plugin.playground.modules.mariella.table_sample","title":"<code>kiara_plugin.playground.modules.mariella.table_sample</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default table_input table The table for which we need to create a sample, in order to test the results on a small portion of a table. yes Outputs field name type description required default table_sample table Random sample of 15 rows for the input table. yes"},{"location":"info/operations/#kiara_info.operations.kiara_plugin.playground.modules.mariella.viz_data_query","title":"<code>kiara_plugin.playground.modules.mariella.viz_data_query</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default query_type string The wished data periodicity to display on visualization. yes column string The column that contains publication names or ref/id. yes Outputs field name type description required default query string The query to pass to the sql query module. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>playground<ul> <li>data_types</li> <li>models</li> <li>modules<ul> <li>caitlin<ul> <li>centrality_measures_module</li> <li>cutpoints_module</li> <li>network_info_module</li> </ul> </li> <li>lena<ul> <li>example_module</li> </ul> </li> <li>mariella</li> </ul> </li> <li>my_kiara_module</li> <li>pipelines</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/playground/__init__/","title":"playground","text":"<p>Top-level package for kiara_plugin.playground.</p>"},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: playground', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.playground'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.playground/'}}, 'tags': ['playground'], 'labels': {'package': 'kiara_plugin.playground'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.playground.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.playground.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.playground.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.playground.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/__init__/#kiara_plugin.playground.get_version","title":"<code>get_version()</code>","text":"Source code in <code>kiara_plugin/playground/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/playground/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.playground</code> package.</p>"},{"location":"reference/kiara_plugin/playground/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.playground</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/playground/my_kiara_module/","title":"my_kiara_module","text":""},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module.TutorialModule","title":"<code>TutorialModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/my_kiara_module.py</code> <pre><code>class TutorialModule(KiaraModule):\n\n    def create_inputs_schema(self):\n        return {\n            \"table_input\": {\n                \"type\": \"table\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_output\": {\n                \"type\": \"table\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n        pass\n</code></pre>"},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module.TutorialModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module.TutorialModule.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/my_kiara_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"table_input\": {\n            \"type\": \"table\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module.TutorialModule.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/my_kiara_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_output\": {\n            \"type\": \"table\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/my_kiara_module/#kiara_plugin.playground.my_kiara_module.TutorialModule.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/my_kiara_module.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/","title":"mariella","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.FileNameMetadata","title":"<code>FileNameMetadata</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>class FileNameMetadata(KiaraModule):\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The corpus for which we want to extract metadata from file names.\"\n            },\n            \"column_name\": {\n                \"type\": \"string\",\n                \"doc\": \"The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_output\": {\n                \"type\": \"table\",\n                \"doc\": \"Augmented table containing extracted metadata.\"\n            },\n            \"publications_ref\": {\n                \"type\": \"list\",\n                \"doc\": \"List of unique publications refs in table.\"\n             },\n            # \"publications_count\": {\n            #     \"type\": \"list\",\n            #     \"doc\": \"Count of unique publications refs in table.\"\n            # }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n        column_name = inputs.get_value_obj(\"column_name\").data\n\n        df = table_obj.data.to_pandas()\n\n         # get publication ref from file name\n        def get_ref(file):\n            ref_match = re.findall(r'(\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_',file)\n            if not ref_match:\n                raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n            return ref_match[0]\n\n        # get date from file name\n        def get_date(file):\n            date_match = re.findall(r'_(\\d{4}-\\d{2}-\\d{2})_',file)\n            if not date_match:\n                raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n            return date_match[0]\n\n        df['date'] = df['file_name'].apply(lambda x: get_date(x))\n\n        df['publication'] = df[column_name].apply(lambda x: get_ref(x))\n\n        df['date'] = pd.to_datetime(df['date'])\n        df = df.sort_values(by='date')\n\n        publications = df['publication'].unique().tolist()\n        # counts = [df['publication'].value_counts().index.to_list(),df['publication'].value_counts().to_list()]\n\n        outputs.set_value(\"table_output\", df)\n        # unique publications references useful at the next step to map publications references with publications names\n        outputs.set_value(\"publications_ref\", publications)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.FileNameMetadata-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.FileNameMetadata.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The corpus for which we want to extract metadata from file names.\"\n        },\n        \"column_name\": {\n            \"type\": \"string\",\n            \"doc\": \"The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.FileNameMetadata.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_output\": {\n            \"type\": \"table\",\n            \"doc\": \"Augmented table containing extracted metadata.\"\n        },\n        \"publications_ref\": {\n            \"type\": \"list\",\n            \"doc\": \"List of unique publications refs in table.\"\n         },\n        # \"publications_count\": {\n        #     \"type\": \"list\",\n        #     \"doc\": \"Count of unique publications refs in table.\"\n        # }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.FileNameMetadata.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n    column_name = inputs.get_value_obj(\"column_name\").data\n\n    df = table_obj.data.to_pandas()\n\n     # get publication ref from file name\n    def get_ref(file):\n        ref_match = re.findall(r'(\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_',file)\n        if not ref_match:\n            raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n        return ref_match[0]\n\n    # get date from file name\n    def get_date(file):\n        date_match = re.findall(r'_(\\d{4}-\\d{2}-\\d{2})_',file)\n        if not date_match:\n            raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n        return date_match[0]\n\n    df['date'] = df['file_name'].apply(lambda x: get_date(x))\n\n    df['publication'] = df[column_name].apply(lambda x: get_ref(x))\n\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values(by='date')\n\n    publications = df['publication'].unique().tolist()\n    # counts = [df['publication'].value_counts().index.to_list(),df['publication'].value_counts().to_list()]\n\n    outputs.set_value(\"table_output\", df)\n    # unique publications references useful at the next step to map publications references with publications names\n    outputs.set_value(\"publications_ref\", publications)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.MapColumn","title":"<code>MapColumn</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>class MapColumn(KiaraModule):\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The table that we need to augment by mapping column values (for example an id with a name) in a new column.\"\n            },\n            \"column_name\": {\n                \"type\": \"string\",\n                \"doc\": \"The column that needs mapping.\"\n            },\n            \"mapping_keys\": {\n                \"type\": \"list\",\n                \"doc\": \"list containing 2 lists: 1st list contains values to replace, and the second the ones they should be replaced with.\"\n            },\n            \"output_col_name\": {\n                \"type\": \"string\",\n                \"doc\": \"name of the newly created column\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_output\": {\n                \"type\": \"table\",\n                \"doc\": \"Augmented table containing new column with mapped values.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n        column_name = inputs.get_value_obj(\"column_name\").data\n        mapping_keys = inputs.get_value_obj(\"mapping_keys\").data\n        output_col_name = inputs.get_value_obj(\"output_col_name\").data\n\n        df = table_obj.data.to_pandas()\n\n        df[output_col_name] = df[column_name].replace(to_replace=mapping_keys[0], value=mapping_keys[1])\n\n\n        outputs.set_value(\"table_output\", df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.MapColumn-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.MapColumn.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The table that we need to augment by mapping column values (for example an id with a name) in a new column.\"\n        },\n        \"column_name\": {\n            \"type\": \"string\",\n            \"doc\": \"The column that needs mapping.\"\n        },\n        \"mapping_keys\": {\n            \"type\": \"list\",\n            \"doc\": \"list containing 2 lists: 1st list contains values to replace, and the second the ones they should be replaced with.\"\n        },\n        \"output_col_name\": {\n            \"type\": \"string\",\n            \"doc\": \"name of the newly created column\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.MapColumn.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_output\": {\n            \"type\": \"table\",\n            \"doc\": \"Augmented table containing new column with mapped values.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.MapColumn.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n    column_name = inputs.get_value_obj(\"column_name\").data\n    mapping_keys = inputs.get_value_obj(\"mapping_keys\").data\n    output_col_name = inputs.get_value_obj(\"output_col_name\").data\n\n    df = table_obj.data.to_pandas()\n\n    df[output_col_name] = df[column_name].replace(to_replace=mapping_keys[0], value=mapping_keys[1])\n\n\n    outputs.set_value(\"table_output\", df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.TableSample","title":"<code>TableSample</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>class TableSample(KiaraModule):\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The table for which we need to create a sample, in order to test the results on a small portion of a table.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_sample\": {\n                \"type\": \"table\",\n                \"doc\": \"Random sample of 15 rows for the input table.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n\n        df = table_obj.data.to_pandas() \n        df_sample = df.sample(n=15,axis=0)\n        if '__index_level_0__' in df_sample.columns:\n            df_sample = df_sample.drop(['__index_level_0__'],axis=1)\n        table_pa = pa.Table.from_pandas(df_sample)\n        outputs.set_value(\"table_sample\", table_pa)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.TableSample-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.TableSample.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The table for which we need to create a sample, in order to test the results on a small portion of a table.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.TableSample.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_sample\": {\n            \"type\": \"table\",\n            \"doc\": \"Random sample of 15 rows for the input table.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.TableSample.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n\n    df = table_obj.data.to_pandas() \n    df_sample = df.sample(n=15,axis=0)\n    if '__index_level_0__' in df_sample.columns:\n        df_sample = df_sample.drop(['__index_level_0__'],axis=1)\n    table_pa = pa.Table.from_pandas(df_sample)\n    outputs.set_value(\"table_sample\", table_pa)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.AddColumn","title":"<code>AddColumn</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>class AddColumn(KiaraModule):\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The table to which we need to append a column.\"\n            },\n            \"array_input\": {\n                \"type\": \"array\",\n                \"doc\": \"The array that needs to be appended as a column.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"preprocessed_tokens\": {\n                \"type\": \"table\",\n                \"doc\": \"The table with the additional column.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n        array_obj = inputs.get_value_obj(\"array_input\")\n\n        df = table_obj.data.to_pandas()\n        col = array_obj.data.to_pylist()\n\n        df['preprocessed_tokens'] = col\n\n        outputs.set_value(\"preprocessed_tokens\", df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.AddColumn-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.AddColumn.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The table to which we need to append a column.\"\n        },\n        \"array_input\": {\n            \"type\": \"array\",\n            \"doc\": \"The array that needs to be appended as a column.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.AddColumn.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"preprocessed_tokens\": {\n            \"type\": \"table\",\n            \"doc\": \"The table with the additional column.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.AddColumn.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n    array_obj = inputs.get_value_obj(\"array_input\")\n\n    df = table_obj.data.to_pandas()\n    col = array_obj.data.to_pylist()\n\n    df['preprocessed_tokens'] = col\n\n    outputs.set_value(\"preprocessed_tokens\", df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.VizDataQuery","title":"<code>VizDataQuery</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>class VizDataQuery(KiaraModule):\n\n    def create_inputs_schema(self):\n\n        return {\n            \"query_type\": {\n                \"type\": \"string\",\n                \"doc\": \"The wished data periodicity to display on visualization.\"\n            },\n            \"column\": {\n                \"type\": \"string\",\n                \"doc\": \"The column that contains publication names or ref/id.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"query\": {\n                \"type\": \"string\",\n                \"doc\": \"The query to pass to the sql query module.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        agg = inputs.get_value_obj(\"query_type\").data\n        col = inputs.get_value_obj(\"column\").data\n\n        if agg == 'month':\n            query = f\"SELECT strptime(concat(month, '/', year), '%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date), MONTH(date))\"\n\n        elif agg == 'year':\n            query = f\"SELECT strptime(year, '%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date))\"\n\n        elif agg == 'day':\n            query = f\"SELECT strptime(concat('01/', month, '/', year), '%d/%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date), MONTH(date), DAY(date))\"\n\n        outputs.set_value(\"query\", query)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.VizDataQuery-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.VizDataQuery.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"query_type\": {\n            \"type\": \"string\",\n            \"doc\": \"The wished data periodicity to display on visualization.\"\n        },\n        \"column\": {\n            \"type\": \"string\",\n            \"doc\": \"The column that contains publication names or ref/id.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.VizDataQuery.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"query\": {\n            \"type\": \"string\",\n            \"doc\": \"The query to pass to the sql query module.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/mariella/#kiara_plugin.playground.modules.mariella.VizDataQuery.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/mariella.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    agg = inputs.get_value_obj(\"query_type\").data\n    col = inputs.get_value_obj(\"column\").data\n\n    if agg == 'month':\n        query = f\"SELECT strptime(concat(month, '/', year), '%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date), MONTH(date))\"\n\n    elif agg == 'year':\n        query = f\"SELECT strptime(year, '%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date))\"\n\n    elif agg == 'day':\n        query = f\"SELECT strptime(concat('01/', month, '/', year), '%d/%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM data GROUP BY {col}, YEAR(date), MONTH(date), DAY(date))\"\n\n    outputs.set_value(\"query\", query)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/__init__/","title":"caitlin","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/","title":"centrality_measures_module","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': 'Caitlin Burge', 'email': 'caitlin.burge@uni.lu'}], 'description': 'Kiara modules for: network_analysis'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Degree_Ranking","title":"<code>Degree_Ranking</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Creates an ordered table with the rank and raw score for degree centrality. In an undirected graph, degree centrality measures the number of independent connections each node has.</p> <p>Uses networkx degree. https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.degree.html</p> Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>class Degree_Ranking(KiaraModule):\n\"\"\"Creates an ordered table with the rank and raw score for degree centrality.\n    In an undirected graph, degree centrality measures the number of independent connections each node has.\n\n    Uses networkx degree.\n    https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.degree.html\"\"\"\n\n    _module_type_name = 'create.degree_rank_list'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"table\",\n                \"doc\" : \"A table showing the rank and raw score for degree centrality.\"\n            },\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"Updated network data with degree ranking assigned as a node attribute.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        G = network_data.as_networkx_graph(nx.Graph)\n\n        def result_func(list):\n            rank, count, previous, result = (0, 0, None, {})\n            for key, num in list:\n                count += 1\n                if num != previous:\n                    rank += count\n                    previous = num\n                    count = 0\n                result[key] = num, rank\n            return result\n\n        degree = G.degree()\n        nx.set_node_attributes(G, degree, 'Degree')\n\n        sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(degree, key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n        df= pd.DataFrame(sorted_dict)\n        df.columns = ['Rank', 'Node', 'Score']\n\n        attribute_network = create_from_networkx_graph(cls, G)\n\n        outputs.set_value('network_result', df)\n        outputs.set_value('network_data', attribute_network)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Degree_Ranking-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Degree_Ranking.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Degree_Ranking.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"table\",\n            \"doc\" : \"A table showing the rank and raw score for degree centrality.\"\n        },\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"Updated network data with degree ranking assigned as a node attribute.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Degree_Ranking.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    G = network_data.as_networkx_graph(nx.Graph)\n\n    def result_func(list):\n        rank, count, previous, result = (0, 0, None, {})\n        for key, num in list:\n            count += 1\n            if num != previous:\n                rank += count\n                previous = num\n                count = 0\n            result[key] = num, rank\n        return result\n\n    degree = G.degree()\n    nx.set_node_attributes(G, degree, 'Degree')\n\n    sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(degree, key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n    df= pd.DataFrame(sorted_dict)\n    df.columns = ['Rank', 'Node', 'Score']\n\n    attribute_network = create_from_networkx_graph(cls, G)\n\n    outputs.set_value('network_result', df)\n    outputs.set_value('network_data', attribute_network)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Betweenness_Ranking","title":"<code>Betweenness_Ranking</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Creates an ordered table with the rank and raw score for betweenness centrality. In an undirected graph, betweenness centrality measures the percentage of all shortest paths that a node appears on, therefore measuring the likeliness that a node may act as a connector or 'intermediary'.</p> <p>Uses networkx.betweenness_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.betweenness_centrality.html#networkx.algorithms.centrality.betweenness_centrality</p> Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>class Betweenness_Ranking(KiaraModule):\n\"\"\"Creates an ordered table with the rank and raw score for betweenness centrality.\n    In an undirected graph, betweenness centrality measures the percentage of all shortest paths that a node appears on, therefore measuring the likeliness that a node may act as a connector or 'intermediary'.\n\n    Uses networkx.betweenness_centrality()\n    https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.betweenness_centrality.html#networkx.algorithms.centrality.betweenness_centrality\"\"\"\n\n    _module_type_name = 'create.betweenness_rank_list'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"table\",\n                \"doc\" : \"A table showing the rank and raw score for betweenness centrality.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        G = network_data.as_networkx_graph(nx.Graph)\n\n        def result_func(list):\n            rank, count, previous, result = (0, 0, None, {})\n            for key, num in list:\n                count += 1\n                if num != previous:\n                    rank += count\n                    previous = num\n                    count = 0\n                result[key] = num, rank\n            return result\n\n        between = nx.betweenness_centrality(G)\n        sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(between.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n        df= pd.DataFrame(sorted_dict)\n        df.columns = ['Rank', 'Node', 'Score']\n\n        outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Betweenness_Ranking-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Betweenness_Ranking.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Betweenness_Ranking.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"table\",\n            \"doc\" : \"A table showing the rank and raw score for betweenness centrality.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Betweenness_Ranking.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    G = network_data.as_networkx_graph(nx.Graph)\n\n    def result_func(list):\n        rank, count, previous, result = (0, 0, None, {})\n        for key, num in list:\n            count += 1\n            if num != previous:\n                rank += count\n                previous = num\n                count = 0\n            result[key] = num, rank\n        return result\n\n    between = nx.betweenness_centrality(G)\n    sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(between.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n    df= pd.DataFrame(sorted_dict)\n    df.columns = ['Rank', 'Node', 'Score']\n\n    outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Eigenvector_Ranking","title":"<code>Eigenvector_Ranking</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Creates an ordered table with the rank and raw score for betweenness centrality. In an undirected graph, eigenvector centrality measures the extent to which a node is connected to other nodes of importance or influence.</p> <p>Uses networkx.eigenvector_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.eigenvector_centrality.html#networkx.algorithms.centrality.eigenvector_centrality</p> Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>class Eigenvector_Ranking(KiaraModule):\n\"\"\"Creates an ordered table with the rank and raw score for betweenness centrality.\n    In an undirected graph, eigenvector centrality measures the extent to which a node is connected to other nodes of importance or influence.\n\n    Uses networkx.eigenvector_centrality()\n    https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.eigenvector_centrality.html#networkx.algorithms.centrality.eigenvector_centrality\"\"\"\n\n    _module_type_name = 'create.eigenvector_rank_list'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            },\n            \"iterations\": {\n                \"type\" : \"integer\",\n                \"default\": 1000\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"table\",\n                \"doc\" : \"A table showing the rank and raw score for eigenvector centrality.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n        iterations = inputs.get_value_data(\"iterations\")\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        G = network_data.as_networkx_graph(nx.Graph)\n\n        def result_func(list):\n            rank, count, previous, result = (0, 0, None, {})\n            for key, num in list:\n                count += 1\n                if num != previous:\n                    rank += count\n                    previous = num\n                    count = 0\n                result[key] = num, rank\n            return result\n\n        eigenvector = nx.eigenvector_centrality(G, max_iter=iterations)\n        sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(eigenvector.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n        df= pd.DataFrame(sorted_dict)\n        df.columns = ['Rank', 'Node', 'Score']\n\n        outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Eigenvector_Ranking-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Eigenvector_Ranking.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        },\n        \"iterations\": {\n            \"type\" : \"integer\",\n            \"default\": 1000\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Eigenvector_Ranking.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"table\",\n            \"doc\" : \"A table showing the rank and raw score for eigenvector centrality.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Eigenvector_Ranking.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n    iterations = inputs.get_value_data(\"iterations\")\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    G = network_data.as_networkx_graph(nx.Graph)\n\n    def result_func(list):\n        rank, count, previous, result = (0, 0, None, {})\n        for key, num in list:\n            count += 1\n            if num != previous:\n                rank += count\n                previous = num\n                count = 0\n            result[key] = num, rank\n        return result\n\n    eigenvector = nx.eigenvector_centrality(G, max_iter=iterations)\n    sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(eigenvector.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n    df= pd.DataFrame(sorted_dict)\n    df.columns = ['Rank', 'Node', 'Score']\n\n    outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Closeness_Ranking","title":"<code>Closeness_Ranking</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Creates an ordered table with the rank and raw score for closeness centrality. In an undirected graph, closeness centrality measures the average shortest distance path between a node and all reachable nodes in the network.</p> <p>Uses networkx.closeness_centrality() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.closeness_centrality.html#networkx.algorithms.centrality.closeness_centrality</p> Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>class Closeness_Ranking(KiaraModule):\n\"\"\"Creates an ordered table with the rank and raw score for closeness centrality.\n    In an undirected graph, closeness centrality measures the average shortest distance path between a node and all reachable nodes in the network.\n\n    Uses networkx.closeness_centrality()\n    https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.closeness_centrality.html#networkx.algorithms.centrality.closeness_centrality\"\"\"\n\n    _module_type_name = 'create.closeness_rank_list'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"table\",\n                \"doc\" : \"A table showing the rank and raw score for closeness centrality.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        G = network_data.as_networkx_graph(nx.Graph)\n\n        def result_func(list):\n            rank, count, previous, result = (0, 0, None, {})\n            for key, num in list:\n                count += 1\n                if num != previous:\n                    rank += count\n                    previous = num\n                    count = 0\n                result[key] = num, rank\n            return result\n\n        closeness = nx.closeness_centrality(G)\n        sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(closeness.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n        df= pd.DataFrame(sorted_dict)\n        df.columns = ['Rank', 'Node', 'Score']\n\n        outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Closeness_Ranking-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Closeness_Ranking.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Closeness_Ranking.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"table\",\n            \"doc\" : \"A table showing the rank and raw score for closeness centrality.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/centrality_measures_module/#kiara_plugin.playground.modules.caitlin.centrality_measures_module.Closeness_Ranking.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/centrality_measures_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    G = network_data.as_networkx_graph(nx.Graph)\n\n    def result_func(list):\n        rank, count, previous, result = (0, 0, None, {})\n        for key, num in list:\n            count += 1\n            if num != previous:\n                rank += count\n                previous = num\n                count = 0\n            result[key] = num, rank\n        return result\n\n    closeness = nx.closeness_centrality(G)\n    sorted_dict = [[item[1][1], item [0], item[1][0]] for item in sorted(result_func(sorted(closeness.items(), key=itemgetter(1), reverse =True)).items(), key=itemgetter(1), reverse =True)]\n\n    df= pd.DataFrame(sorted_dict)\n    df.columns = ['Rank', 'Node', 'Score']\n\n    outputs.set_value('network_result', df)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/","title":"cutpoints_module","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': 'Caitlin Burge', 'email': 'caitlin.burge@uni.lu'}], 'description': 'Kiara modules for: network_analysis'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.CutPointsList","title":"<code>CutPointsList</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Create a list of nodes that are cut-points. Cut-points are any node in a network whose removal disconnects members of the network, creating one or more new distinct components.</p> <p>Uses networkx.articulation_points() https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.components.articulation_points.html</p> Source code in <code>kiara_plugin/playground/modules/caitlin/cutpoints_module.py</code> <pre><code>class CutPointsList(KiaraModule):\n\"\"\"Create a list of nodes that are cut-points.\n    Cut-points are any node in a network whose removal disconnects members of the network, creating one or more new distinct components.\n\n    Uses networkx.articulation_points()\n    https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.components.articulation_points.html\"\"\"\n\n    _module_type_name = 'create.cut_point_list'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"list\",\n                \"doc\" : \"A list of all nodes that are cut-points.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        G = network_data.as_networkx_graph(nx.Graph)  # you can also use nx.DiGraph or other types\n\n        cutpoints = list(nx.articulation_points(G))\n\n        outputs.set_value('network_result', cutpoints)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.CutPointsList-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.CutPointsList.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/cutpoints_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.CutPointsList.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/cutpoints_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"list\",\n            \"doc\" : \"A list of all nodes that are cut-points.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/cutpoints_module/#kiara_plugin.playground.modules.caitlin.cutpoints_module.CutPointsList.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/cutpoints_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    G = network_data.as_networkx_graph(nx.Graph)  # you can also use nx.DiGraph or other types\n\n    cutpoints = list(nx.articulation_points(G))\n\n    outputs.set_value('network_result', cutpoints)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/","title":"network_info_module","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': 'Caitlin Burge', 'email': 'caitlin.burge@uni.lu'}], 'description': 'Kiara modules for: network_analysis'}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.NetworkInfo","title":"<code>NetworkInfo</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Return basic information for the newtork graph created, including number of nodes and edges.</p> <p>Needs to specify if graph is directed or undirected, but will default to undirected.</p> Source code in <code>kiara_plugin/playground/modules/caitlin/network_info_module.py</code> <pre><code>class NetworkInfo(KiaraModule):\n\"\"\"Return basic information for the newtork graph created, including number of nodes and edges.\n\n    Needs to specify if graph is directed or undirected, but will default to undirected.\"\"\"\n\n    _module_type_name = 'get.network_info'\n\n    def create_inputs_schema(self):\n        return {\n            \"network_data\": {\n                \"type\": \"network_data\",\n                \"doc\": \"The network graph being queried.\"\n            },\n            \"graph_type\": {\n                \"type\": \"string\",\n                \"doc\": \"The graph type: directed or undirected\",\n                \"default\": \"undirected\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"network_result\": {\n                \"type\": \"string\",\n                \"doc\" : \"Information about the network graph.\"\n            }\n        }\n\n    def process(self, inputs, outputs):\n        edges = inputs.get_value_obj('network_data')\n        graph = inputs.get_value_data('graph_type')\n\n        network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                                # convenience methods it can give you:\n                                                # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n        if graph == 'directed':\n            G = network_data.as_networkx_graph(nx.DiGraph)\n        else:\n            G = network_data.as_networkx_graph(nx.Graph)\n\n        if nx.is_directed(G) == True:\n                info = str(\n                'Graph Type: Directed \\n' +\n                'Number of Nodes: ' + str(nx.number_of_nodes(G)) + '\\n'\n                'Number of Edges: ' + str(nx.number_of_edges(G)) + '\\n'\n                'Graph Density Score: ' + str(nx.density(G)) + '\\n'\n                'Number of Connected Components: ' + str(nx.number_connected_components(G)) + '\\n'\n                'Number of nodes in Largest Component: ' + str((G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])).number_of_nodes()) + '\\n'\n                'Network Diameter of Largest Component: ' + str(nx.diameter(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n                'Average Path Length of Largest Component: ' + str(nx.average_shortest_path_length(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n                )\n        else:\n        \tinfo = str(\n        \t'Graph Type: Undirected \\n' +\n        \t'Number of Nodes: ' + str(nx.number_of_nodes(G)) + '\\n'\n        \t'Number of Edges: ' + str(nx.number_of_edges(G)) + '\\n'\n            'Graph Density Score: ' + str(nx.density(G)) + '\\n'\n            'Number of Connected Components: ' + str(nx.number_connected_components(G)) + '\\n'\n            'Number of nodes in Largest Component: ' + str((G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])).number_of_nodes()) + '\\n'\n            'Network Diameter of Largest Component : ' + str(nx.diameter(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n            'Average Path Length of Largest Component: ' + str(nx.average_shortest_path_length(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])))\n                )\n\n        outputs.set_value('network_result', info)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.NetworkInfo-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.NetworkInfo.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/network_info_module.py</code> <pre><code>def create_inputs_schema(self):\n    return {\n        \"network_data\": {\n            \"type\": \"network_data\",\n            \"doc\": \"The network graph being queried.\"\n        },\n        \"graph_type\": {\n            \"type\": \"string\",\n            \"doc\": \"The graph type: directed or undirected\",\n            \"default\": \"undirected\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.NetworkInfo.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/network_info_module.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"network_result\": {\n            \"type\": \"string\",\n            \"doc\" : \"Information about the network graph.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/caitlin/network_info_module/#kiara_plugin.playground.modules.caitlin.network_info_module.NetworkInfo.process","title":"<code>process(inputs, outputs)</code>","text":"Source code in <code>kiara_plugin/playground/modules/caitlin/network_info_module.py</code> <pre><code>def process(self, inputs, outputs):\n    edges = inputs.get_value_obj('network_data')\n    graph = inputs.get_value_data('graph_type')\n\n    network_data: NetworkData = edges.data  # check the source for the NetworkData class to see what\n                                            # convenience methods it can give you:\n                                            # https://github.com/DHARPA-Project/kiara_plugin.network_analysis/blob/develop/src/kiara_plugin/network_analysis/models.py#L52\n\n    if graph == 'directed':\n        G = network_data.as_networkx_graph(nx.DiGraph)\n    else:\n        G = network_data.as_networkx_graph(nx.Graph)\n\n    if nx.is_directed(G) == True:\n            info = str(\n            'Graph Type: Directed \\n' +\n            'Number of Nodes: ' + str(nx.number_of_nodes(G)) + '\\n'\n            'Number of Edges: ' + str(nx.number_of_edges(G)) + '\\n'\n            'Graph Density Score: ' + str(nx.density(G)) + '\\n'\n            'Number of Connected Components: ' + str(nx.number_connected_components(G)) + '\\n'\n            'Number of nodes in Largest Component: ' + str((G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])).number_of_nodes()) + '\\n'\n            'Network Diameter of Largest Component: ' + str(nx.diameter(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n            'Average Path Length of Largest Component: ' + str(nx.average_shortest_path_length(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n            )\n    else:\n    \tinfo = str(\n    \t'Graph Type: Undirected \\n' +\n    \t'Number of Nodes: ' + str(nx.number_of_nodes(G)) + '\\n'\n    \t'Number of Edges: ' + str(nx.number_of_edges(G)) + '\\n'\n        'Graph Density Score: ' + str(nx.density(G)) + '\\n'\n        'Number of Connected Components: ' + str(nx.number_connected_components(G)) + '\\n'\n        'Number of nodes in Largest Component: ' + str((G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])).number_of_nodes()) + '\\n'\n        'Network Diameter of Largest Component : ' + str(nx.diameter(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0]))) + '\\n'\n        'Average Path Length of Largest Component: ' + str(nx.average_shortest_path_length(G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])))\n            )\n\n    outputs.set_value('network_result', info)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/lena/__init__/","title":"lena","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/","title":"example_module","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': 'Lena Jaskov', 'email': 'helena.jaskov@uni.lu'}]}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.FindLargestComponentsModuleConfig","title":"<code>FindLargestComponentsModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>kiara_plugin/playground/modules/lena/example_module.py</code> <pre><code>class FindLargestComponentsModuleConfig(KiaraModuleConfig):\n\n    find_largest_component: bool = Field(\n        description=\"Find the largest component of a graph.\", default=True\n    )\n\n    number_of_components: bool = Field(\n        description=\"Count the number of components.\", default=True\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.FindLargestComponentsModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.FindLargestComponentsModuleConfig.find_largest_component","title":"<code>find_largest_component: bool = Field(description='Find the largest component of a graph.', default=True)</code>  <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.FindLargestComponentsModuleConfig.number_of_components","title":"<code>number_of_components: bool = Field(description='Count the number of components.', default=True)</code>  <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule","title":"<code>GraphComponentsModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Counts all graph components and creates new graph from largest component.</p> Source code in <code>kiara_plugin/playground/modules/lena/example_module.py</code> <pre><code>class GraphComponentsModule(KiaraModule):\n\"\"\"Counts all graph components and creates new graph from largest component.\"\"\"\n\n    _config_cls = FindLargestComponentsModuleConfig\n    _module_type_name = \"graph_components\"\n\n    def create_input_schema(\n        self,\n    ) -&gt; typing.Mapping[\n        str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]\n    ]:\n\n        return {\"graph\": {\"type\": \"network_graph\", \"doc\": \"The network graph.\"}}\n\n    def create_output_schema(\n        self,\n    ) -&gt; typing.Mapping[\n        str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]\n    ]:\n\n        result = {}\n        if self.get_config_value(\"find_largest_component\"):\n            result[\"largest_component\"] = {\n                \"type\": \"network_graph\",\n                \"doc\": \"A sub-graph of the largest component of the graph.\",\n            }\n\n        if self.get_config_value(\"number_of_components\"):\n            result[\"number_of_components\"] = {\n                \"type\": \"integer\",\n                \"doc\": \"The number of components in the graph.\",\n            }\n\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        if self.get_config_value(\"find_largest_component\"):\n            input_graph: Graph = inputs.get_value_data(\"graph\")\n            print(f\"INPUT: {input_graph}\")\n            undir_graph = nx.to_undirected(input_graph)\n            undir_components = nx.connected_components(undir_graph)\n            lg_component = max(undir_components, key=len)\n            subgraph = input_graph.subgraph(lg_component)\n            print(f\"subgraph: {subgraph}\")\n\n            outputs.set_values(largest_component=subgraph)\n\n        if self.get_config_value(\"number_of_components\"):\n            input_graph = inputs.get_value_data(\"graph\")\n            undir_graph = nx.to_undirected(input_graph)\n            number_of_components = nx.number_connected_components(undir_graph)\n\n            outputs.set_values(number_of_components=number_of_components)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule._config_cls","title":"<code>_config_cls = FindLargestComponentsModuleConfig</code>  <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule.create_input_schema","title":"<code>create_input_schema() -&gt; typing.Mapping[str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]]</code>","text":"Source code in <code>kiara_plugin/playground/modules/lena/example_module.py</code> <pre><code>def create_input_schema(\n    self,\n) -&gt; typing.Mapping[\n    str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]\n]:\n\n    return {\"graph\": {\"type\": \"network_graph\", \"doc\": \"The network graph.\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule.create_output_schema","title":"<code>create_output_schema() -&gt; typing.Mapping[str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]]</code>","text":"Source code in <code>kiara_plugin/playground/modules/lena/example_module.py</code> <pre><code>def create_output_schema(\n    self,\n) -&gt; typing.Mapping[\n    str, typing.Union[ValueSchema, typing.Mapping[str, typing.Any]]\n]:\n\n    result = {}\n    if self.get_config_value(\"find_largest_component\"):\n        result[\"largest_component\"] = {\n            \"type\": \"network_graph\",\n            \"doc\": \"A sub-graph of the largest component of the graph.\",\n        }\n\n    if self.get_config_value(\"number_of_components\"):\n        result[\"number_of_components\"] = {\n            \"type\": \"integer\",\n            \"doc\": \"The number of components in the graph.\",\n        }\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/playground/modules/lena/example_module/#kiara_plugin.playground.modules.lena.example_module.GraphComponentsModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>kiara_plugin/playground/modules/lena/example_module.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    if self.get_config_value(\"find_largest_component\"):\n        input_graph: Graph = inputs.get_value_data(\"graph\")\n        print(f\"INPUT: {input_graph}\")\n        undir_graph = nx.to_undirected(input_graph)\n        undir_components = nx.connected_components(undir_graph)\n        lg_component = max(undir_components, key=len)\n        subgraph = input_graph.subgraph(lg_component)\n        print(f\"subgraph: {subgraph}\")\n\n        outputs.set_values(largest_component=subgraph)\n\n    if self.get_config_value(\"number_of_components\"):\n        input_graph = inputs.get_value_data(\"graph\")\n        undir_graph = nx.to_undirected(input_graph)\n        number_of_components = nx.number_connected_components(undir_graph)\n\n        outputs.set_values(number_of_components=number_of_components)\n</code></pre>"},{"location":"reference/kiara_plugin/playground/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"}]}